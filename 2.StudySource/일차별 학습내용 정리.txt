------------------------------------  1일차 --------------------------------------- 
1. Winform 컨트롤의 사용법 
   . Text 속성 및 Name 속성 부여 
2. Winform .NET Framwork 솔루션 생성
  .  솔루션 명 : MyApplication 
  .  프로젝트 명 : MainForms 
3. LogIn 윈폼 양식 생성 
  . 프로젝트 - 추가 - Winform양식 - LogIn.cs
4. Login 폼 디자인 
  . ID, PW 텍스트 박스 생성 
  . 로그인, 비밀번호 변경 버튼 생성 
5. 로그인 기능 구현 
  . Data Base 연동을 위한 접속 경로 설정 및 Database OPen
  . ID / PW 입력 상태 에 따른 로그인 여부 체크 
    1. ID/PW 둘다 맞을경우  , 2.ID/PW 중 하나만 맞을경우 , 3. 비밀번호 3회 오류시 프로그램 종료
6. 엔터 키 시 자동 로그인 
  . 비밀번호 입력 란(텍스트박스) 에 엔터 입력시 로그인 버튼 메서드 호출
7. 비밀번호 변경 
  . 비밀번호 변경 버튼 클릭 시 비밀번호 변경 클래스 윈폼 양식 호출 
  . 로그인 창 숨기기 및 비밀번호 변경 로직 종료 후 나타내기 (동기식(show)과 비동기식(showDialog))






------------------------2일차------------------------
1. 클래스 라이브러리 생성 
  . Service 클래스 라이브러리 생성 
  . Common 클래스 생성 
  . db 접속 경로 Common 클래스 로 이동. 

2. 데이터베이스 접속 
  . 접속 경로를 가져오기 위한 클래스 참조
  . 접속 경로 정적 한정자 로 지정 
  . 접속 경로 변질 방지를 위한 상수 지정 

3. ID/PW 변경 가능 상태 확인
  . DB 접속 및 ID , 현재 PW 비교 

4. 비밀번호 변경 
  . SqlCommand (데이터 베이스에 Insert, Delete,Update 명령 수행) 객체 생성
  . Transation     ( 데이터 갱신 결과에 대한 권한 부여 ) 등록
  . SqlConnection ( 데이터 베이스 접속 정보) 등록
  . Update Sql 문 등록
  . ExcutenonQuery (갱신 명령 실행) 
  . 트랜잭션 Commit / Rollback

5. 탭 순서 바꾸기 
  . 보기 -> 탭순서

6. Database 를 이용한 비밀번호 3회 오류 로직 구현.







------------------------------------------------ 4일차 ----------------------------------------------------------
1. 구현 화면을 담을 Form 모듈 생성 
  . FormList 클래스 라이브러리 생성
  . WinForm DLL 파일 참조 추가


2 MainForm 에 매뉴 등록 
 -FormList 클래스라이브러리 MainForms 프로젝트에 추가. 
     . using 을 통해 MDI_Test1 화면 오픈.
  - MDI_Test1 을 나타내는 로직 (MDI  기능을 사용)
     . MainForm 을 ismdicontainer 속성 true
     . 테스트 - MDI_Test1 을 나타내는 매뉴 등록
     . DropDownItemClicked 이벤트 를 통해  클릭한 매뉴의 화면 호출. 
     . MDI_Test1  클래스 객체의 부모를 MainForm 으로 설정 (MDI1.MdiParent = this;)
 
  - 탭 컨트롤 을 상속 받아서 탭페이지 만드는 기능 메서드 추가
    . Services 프로젝트에 추가. 
    . 탭 페이지에 폼 추가 하는 AddForm 메서드 생성

  - 메인 매뉴 에 탭컨트롤 추가 (MyTabCopntrol)

  - 매뉴 클릭 시 클릭한 매뉴의 클래스 추출 및 탭 컨트롤에 추가. 
  - 중복 매뉴 클릭시 등록된 매뉴가 활성화 되도록 기능 추가.

  - 품목 마스터(itemMaster) 화면 FormList 프로젝트에 생성
    . 디자인

  - 폼이 로드 될때 셋팅 
    . 1. 그리드 셋팅.






------------------------------------------------ 5일차 ----------------------------------------------------------
1. 화면 Load 시 셋팅하기 
  - 공통 기준정보 데이터를 이용한 품목유형 (콤보박스)
    . DisplayMember : 사용자가 눈으로 보고 업무를 수행하기 위해 선택할 리스트 
    . VallueMember  : 시스템 이 Database 처리 할 Code (사용자에게 보이지 않음)

  - 시작 일자 및 현재 일자 고정 (데이터타임피커)

  - 조회 기능 구현 
    . 조회 조건을 만족시키는 데이터 수집  SQL 구문 작성.
    . 조회 조건에 변수 등록하기 와 LIKE 
    . UNION 을 이용한 콤보박스데이터 구성 
    . 조회 결과 그리드 매핑 (DataSource)

  - 그리드 에 행 추가 로직 적용
  - 품목 데이터 삭제 로직 구현 
     . delete 
  - 품목 데이터 저장 로직 구현 
    . 메서드를 이용한 update / insert  로직 적용. 








------------------------------------------------ 6일차 ----------------------------------------------------------
1. 이미지 불러오기 
  - 파일 탐색기 호출 
  - 이미지 파일 선택 
  - 이미지 파일 주소 픽쳐박스의 Tag 에 저장 
  - 이미지 파일 접근 후 픽처박스 Image 에 등록 및 표현

2. 이미지 등록 하기 
  - 테이블 에 IMAGE 형식의 컬럼ItemImage 생성 
  - FileStream 으로 파일 위치 접근 
  - BinaryReader 으로 Binary 데이터 추출
  - byte[] 배열로 패킹 
  - 데이터 베이스 저장


3. 품목 클릭 시 이미지 표현
  - 데이터 베이스에 서 품목 에 맞는 이미지 파일 데이터 테이블에 등록
  - Byte[] 로 형 변환 
  - 메모리 스트림으로 byte[] 데이터 에 접근 
  - BitMap (이미지 데이터) 로 변경
  - 픽쳐박스 Image 에 표현

4. 품목 이미지 삭제 (UPDATE)
  - 선택한 품목의 IMAGE 파일 데이터 컬럼을 Null 로 UPDATE


5. 사용자 ID 정보 관리 
  . 로그인 시 사용자 ID Commons 에 등록 후 시스템에서 관리

6. 자식클래스 에서 부모클래스 컨트롤
  . 부모 클래스(MainForm) 을 Static 멤버변수 생성 후 생성된 자기자신this 클래스를 public static 변수에 등록하여 
    자식 클래스에서 접근 할 수 있도록 설정

7. 사용자 마스터 화면 실습
  . 설계서를 바탕으로 학습한 내용 을 사용자 마스터 화면 으로 개발 진행





------------------------------------------------ 7일차 ----------------------------------------------------------
1. 툴바 기능 적용 
  - 조회, 추가, 삭제, 저장 툴바의 기능을 모두 수행하는 로직을 만들기 어려움
  - 모든 화면의 조회,추가,삭제,저장의 기능을 수행 할 수 있는 추상 클래스 생성이 필요

2. 추상화 
  - 인터페이스 생성 
  - BaseChild Form 화면에 인터페이스 상속 
    . 시스템에서 사용하는 기준 화면 디자인
    . 인터페이스를 상속 받아 BaseChild 를 상속받은 클래스에게 메서드를 상속 (Virtual)

3. 툴바와 탭페이지의 화면 연동 
  - 탭페이지의 화면을 BaseChild 추상클래스로 업 캐스팅
  - BaseChild 의 메서드 (조회,추가,삭제,저장) 기능 실행 
    . 업캐스팅 된 하위 클래스의 기능이 실행 됨  


4. 그리드 셋팅 로직 리팩터링
  - Service 프로젝트에 GridUtil 클래스로 생성하여 그리드 셋팅 메서드 구현
    . 그리드 셋팅 로직의 Core 화














------------------------------------------------ 8일차 ----------------------------------------------------------
1. 콤보박스 세팅 로직 공통 메서드로 변형 
  . Commons 에 공통기준정보 관련 콤보박스 세팅 로직 적용 후 
   외부 에서 호출. 

2. 저장 프로시저를 통한 그리드 조회 
  . 어플리케이션에서 저장 프로시저 호출
  . 저장 프로시저 생성 SP_UserMaster_S1
  . 저장 프로시저 에 파라매터 등록.

3. 조회 결과 에 그리드 콤보박스 등록
  . 공통기준정보 의 콤보박스 데이터 를 가져 올 데이터테이블 반환 메서드 생성 (GetCombo_Standard_Grid)
  . 그리드 콤보박스 객체 생성 및 데이터 매핑
  . 부서 컬럼 에 콤보박스 셋팅. 












------------------------------------------------ 9일차 ----------------------------------------------------------
1. 그리드 콤보박스 셋팅 로직 리펙터링
  . Commons 클래스 에 시스템 공통으로 적용 할 수 있는 메서드 생성 (코어 메서드)

2. 추가 시 그리드 콤보박스 셋팅
  . 신규 행 에 만 콤보박스를 셋팅 할 수 있도록 메서드 수정. 
  . 기존의 메서드 호출 로직을 수정 하지 않아도 변경 내역을 공통으로 적용 할 수 있도록 기본값을 가진 인자 설정

3. 툴바 삭제 기능 구현
  . 선택된 행의 Index 를 추출 하여 Delete() 로 삭제 (원본 데이터의 유지)

4. 저장 기능 구현 
  . 그리드 행의 데이터 변경 내역 리스트 추출
  . 변경 내역 추출 리스트 에서 한 행씩 뽑아 내어 건별로 처리 로직 (Froeach)
  . 추출된 변경내역의 상태 에 따른 Insert/Update/Delete 분기 적용
  . 삭제 상태의 행일 경우 RejectChange() 기능을 통해 원본 데이터 복원

5. 삭제 프로시저 생성 
  . 데이터 삭제 프로시저 실행

6. 신규 등록 프로시저 생성 
  . 데이터 등록 프로시저 실행
  . 프로시저 내부 벨리데이션 체크 로직 적용
  . 데이터베이스에서 프로시저 성공여부 프로그램으로 반환 및 결과에 따른 Commit , Rollback

7. 수정 내역 적용 프로시저 생성 
  . 변경 내역 update 프로시저 실행. 

8. Command 에 등록 된 프로시저 초기화.










